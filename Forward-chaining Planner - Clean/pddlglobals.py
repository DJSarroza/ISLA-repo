

_TRUE = "true"
_FALSE = "false"

_PARENT_OPERATOR = "-"
_TYPE_OPERATOR = "-"

_VAR_OPERATOR = "?"
_FORALL_VAR_OPERATOR = "!"

_AND_OPERATOR = "and"
_OR_OPERATOR  = "or"
_NOT_OPERATOR = "not"
_IF_OPERATOR = "if"
_IFELSE_OPERATOR = "ifelse"

_CONDITIONAL_OPERATORS = []
_CONDITIONAL_OPERATORS.append(_AND_OPERATOR )
_CONDITIONAL_OPERATORS.append(_OR_OPERATOR  )
_CONDITIONAL_OPERATORS.append(_NOT_OPERATOR )
_CONDITIONAL_OPERATORS.append(_IF_OPERATOR )
_CONDITIONAL_OPERATORS.append(_IFELSE_OPERATOR )

_FORALL_OPERATOR = "forall"
_WHEN_OPERATOR = "when"
_THEN_OPERATOR = "then"

_EXEC_ACTION_OPERATOR = "exec_action"

_ALL_PREDICATE_TREE_OPERATORS = []
_ALL_PREDICATE_TREE_OPERATORS.append(_AND_OPERATOR     )
_ALL_PREDICATE_TREE_OPERATORS.append(_OR_OPERATOR      )
_ALL_PREDICATE_TREE_OPERATORS.append(_NOT_OPERATOR     )
_ALL_PREDICATE_TREE_OPERATORS.append(_FORALL_OPERATOR  ) 
_ALL_PREDICATE_TREE_OPERATORS.append(_WHEN_OPERATOR    )

_EQUAL_OPERATOR = "equals"

_OBJECT_TYPE = "object"
_STATE_TYPE = "state" 
_ADMIN_TYPE = "admin"
_PREDICATE_TYPE = "predicate"
_INTENTIONALITY_OPERATORS = ["intends"]
_ADJACENCY_OPERATORS = ["adjacent"]